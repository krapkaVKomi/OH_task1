import psycopg2

host = "localhost"
user = "postgres"
password = "postgres"
db_name = "find_db"


def create_word_table(lineofdoc, wordofdoc):
    try:
        # connect to exist database
        connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )
        connection.autocommit = True

        with connection.cursor() as cursor:
            cursor.execute(
                f"""
                            CREATE TABLE IF NOT EXISTS public.find_info_{lineofdoc}
                (
                    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
                    line_number integer NOT NULL,
                    text character varying(600) COLLATE pg_catalog."default" NOT NULL,
                    doc_id bigint,
                    CONSTRAINT find_info_{lineofdoc}_pkey PRIMARY KEY (id),
                    CONSTRAINT find_info_{lineofdoc}_doc_id_5db797d9_fk_find_info_doc_id FOREIGN KEY (doc_id)
                        REFERENCES public.find_info_doc (id) MATCH SIMPLE
                        ON UPDATE NO ACTION
                        ON DELETE NO ACTION
                        DEFERRABLE INITIALLY DEFERRED
                )
    
                    TABLESPACE pg_default;
    
                    ALTER TABLE IF EXISTS public.find_info_{lineofdoc}
                        OWNER to postgres;
    
                    CREATE INDEX IF NOT EXISTS find_info_{lineofdoc}_doc_id_5db797d9
                        ON public.find_info_{lineofdoc} USING btree
                        (doc_id ASC NULLS LAST)
                        TABLESPACE pg_default;
                    """
            )
            print("[INFO] Table created successfully")

        with connection.cursor() as cursor:
            cursor.execute(
                f"""
                           CREATE TABLE IF NOT EXISTS public.find_info_{wordofdoc}
            (
                id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
                text character varying(100) COLLATE pg_catalog."default" NOT NULL,
                doc_id bigint,
                line_id bigint,
                CONSTRAINT find_info_{wordofdoc}_pkey PRIMARY KEY (id),
                CONSTRAINT find_info_{wordofdoc}_doc_id_46e52224_fk_find_info_doc_id FOREIGN KEY (doc_id)
                    REFERENCES public.find_info_doc (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    DEFERRABLE INITIALLY DEFERRED,
                CONSTRAINT find_info_{wordofdoc}_line_id_2213a844_fk_find_info_{lineofdoc}_id FOREIGN KEY (line_id)
                    REFERENCES public.find_info_{lineofdoc} (id) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE NO ACTION
                    DEFERRABLE INITIALLY DEFERRED
            )
            
            TABLESPACE pg_default;
            
            ALTER TABLE IF EXISTS public.find_info_{wordofdoc}
                OWNER to postgres;
            -- Index: find_info_{wordofdoc}_doc_id_46e52224
            
            -- DROP INDEX IF EXISTS public.find_info_{wordofdoc}_doc_id_46e52224;
            
            CREATE INDEX IF NOT EXISTS find_info_{wordofdoc}_doc_id_46e52224
                ON public.find_info_{wordofdoc} USING btree
                (doc_id ASC NULLS LAST)
                TABLESPACE pg_default;
            -- Index: find_info_{wordofdoc}_line_id_2213a844
            
            -- DROP INDEX IF EXISTS public.find_info_{wordofdoc}_line_id_2213a844;
            
            CREATE INDEX IF NOT EXISTS find_info_{wordofdoc}_line_id_2213a844
                ON public.find_info_{wordofdoc} USING btree
                (line_id ASC NULLS LAST)
                TABLESPACE pg_default;
            -- Index: find_info_{wordofdoc}_text_ae4e2fb0
            
            -- DROP INDEX IF EXISTS public.find_info_{wordofdoc}_text_ae4e2fb0;
            
            CREATE INDEX IF NOT EXISTS find_info_{wordofdoc}_text_ae4e2fb0
                ON public.find_info_{wordofdoc} USING btree
                (text COLLATE pg_catalog."default" ASC NULLS LAST)
                TABLESPACE pg_default;
            -- Index: find_info_{wordofdoc}_text_ae4e2fb0_like
            
            -- DROP INDEX IF EXISTS public.find_info_{wordofdoc}_text_ae4e2fb0_like;
            
            CREATE INDEX IF NOT EXISTS find_info_{wordofdoc}_text_ae4e2fb0_like
                ON public.find_info_{wordofdoc} USING btree
                (text COLLATE pg_catalog."default" varchar_pattern_ops ASC NULLS LAST)
                TABLESPACE pg_default;
                                """
            )
            print("[INFO] Table created successfully")

    except Exception as _ex:
        print("[INFO] Error while working with PostgreSQL", _ex)
    finally:
        if connection:
            connection.close()
            print("[INFO] PostgreSQL connection closed")


# create_word_table(lineofdoc='line_test_0', wordofdoc='word_test_0')


def create_line_of_doc(table):
    pass


def create_word_of_doc(table):
    pass

            # TASKS

# line_of_doc = LineOfDoc.objects.create(text=line, doc=document, line_number=line_count) to SQL
# WordOfDoc.objects.create(text=word, line=line_of_doc, doc=document) to SQL
# lines_of_tible = WordOfDoc.objects.filter(doc_id=select_file_id) & WordOfDoc.objects.filter(text__istartswith=query) to SQL
# Create tables model in models.py

# [[! ПОМИЛКА] полетить адмінка]

            # Query algorithm to the table of tables
# for i in list_docs:
#   query to table i.lineofdoc
#   query to table i.wordofdoc
